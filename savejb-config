#!/bin/bash
####################
### saveconfig #####
version=0.7 ########
### JustBrowsing ###
####################

probeDevice="/dev/disk/by-label/JUSTDATA"
mntDir="/etc/justbrowsing/mount"
saveDir="/etc/justbrowsing/data"
configFile="${saveDir}/config"
cfgFile="${mntDir}/justbrowsing.cfg"
lockFile="/tmp/savecfg.lock"
daemon="/tmp/savecfg.daemon"
logFile="/tmp/savecfg.log"
htmlFile="/tmp/sync.html"

LOG_STATUS() { echo "ERROR: $@" >> "$logFile"; }

PARSE_CONFIG() { 
  grep ^${1} "$configFile" 2>/dev/null | sed -e "s/^${1} = //" -e "s/^${1}=//" | tail -n 1;
}

MULTIPARSE_CONFIG() { 
  grep ^${1} "$configFile" 2>/dev/null | sed -e "s/^${1} = //" -e "s/^${1}=//";
}

OVERRIDE_CFG() {
  parameter=$(eval echo \$$1);
  sed -i "/^$1/d" "$cfgFile"
  if [ ! -z "$parameter" ]; then
    IFS=" "
    for arg in $parameter; do
      echo "$1 = $arg" >> "$cfgFile"
    done
  fi
}

MAKE_HTML() {
  browserPID=$(pgrep -nx x-www-browser);
  activeUser=$(ps aux | grep "$browserPID" | grep -v grep | awk '{print $1}' | grep -v root | awk NR==1);
  activeDisplay=$(ls --color=none /tmp/.X11-unix/ | sed 's/^X/:/');
  echo "<html><head><title>Saved :: jb-config</title></head>" > "$htmlFile"
  echo "<body><h1>Successfully saved justbrowsing.cfg</h1>" >> "$htmlFile"
  cat "$cfgFile" | sed ':a;N;$!ba;s/\n/<br>\n/g' >> "$htmlFile"
  [ -f "$logFile" ] &&
  echo "<h1>The following errors occured:</h1>" >> "$htmlFile" &&
  cat "$logFile" | sed ':a;N;$!ba;s/\n/<br>\n/g' >> "$htmlFile"
  echo "</body></html>" >> "$htmlFile"
}

# Request sync
if [ "$1" = "sync" ]; then
  rm "$lockFile"
elif [ "$1" = "daemon" ]; then
  touch "$daemon"
  session=$(pgrep -o $2);
  while [ -n "$session" ] && [ -f "$daemon" ]; do
    [ -f "$lockFile" ] && "$0" sync
    session=$(pgrep -o $2)
    sleep 15
  done
  exit 1
else
  touch "$lockFile"
  exit 0
fi


# Load config from boot parameters
export -f PARSE_CONFIG OVERRIDE_CFG
skipcfg=$(PARSE_CONFIG skipcfg)
[ "$skipcfg" = "true" ] && exit 0

display=$(PARSE_CONFIG display)
zone=$(PARSE_CONFIG zone)
keymap=$(PARSE_CONFIG keymap)
locale=$(PARSE_CONFIG locale)
clean=$(PARSE_CONFIG clean)
gpu=$(PARSE_CONFIG gpu)
url=$(PARSE_CONFIG url)
backlight=$(PARSE_CONFIG backlight)
idle=$(PARSE_CONFIG idle)
volume=$(PARSE_CONFIG volume)
mouse=$(PARSE_CONFIG mouse)
touchpad=$(PARSE_CONFIG touchpad)
default=$(PARSE_CONFIG default)
[ "$default" = "google-chrome" ] && default="chrome"
printer=$(MULTIPARSE_CONFIG printer)

# Load config from persistent storage
if [ -b "$probeDevice" ]; then
  [ "$UID" = "0" ] || LOG_STATUS "Need to be root"
  mkdir -p "$mntDir" "$saveDir" || LOG_STATUS "unable to create dirs: $mntDir $saveDir"
  mount -o rw "$probeDevice" "$mntDir" || LOG_STATUS "unable to mount $probeDevice"
  touch "$cfgFile"
  sed -i 's/^M$//' "$cfgFile"
  [ -f "$cfgFile" ] || LOG_STATUS "unable to create $cfgFile"
  OVERRIDE_CFG display
  OVERRIDE_CFG zone
  OVERRIDE_CFG keymap
  OVERRIDE_CFG locale
  OVERRIDE_CFG clean
  OVERRIDE_CFG gpu
  OVERRIDE_CFG url
  OVERRIDE_CFG backlight
  OVERRIDE_CFG idle
  OVERRIDE_CFG volume
  OVERRIDE_CFG mouse
  OVERRIDE_CFG touchpad
  OVERRIDE_CFG default
  OVERRIDE_CFG printer
  MAKE_HTML
  umount "$mntDir" 2>/dev/null || LOG_STATUS "unable to unmount $mntDir"
  echo "==> Saved config to justbrowsing.cfg"
  su - "$activeUser" -c "DISPLAY=${activeDisplay} /usr/bin/x-www-browser file://${htmlFile}"
else
  echo "==> Notice: config not saved"
fi

### END ###
