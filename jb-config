#!/bin/bash
####################
### jb-config ######
version="1.7" ######
### JustBrowsing ###
####################

workDir=$(dirname $(readlink  -e "$0"));
width="710"
icon="gnome-control-center"

############################################################################################

gutenprint=$(which cups-genppdupdate 2>/dev/null)
printDrivers="true"
[ -z "$gutenprint" ] && printDrivers="false"
export printDrivers

printerStatus=$(setjb-printers current 2>/dev/null)
defaultBrand=$(echo "$printerStatus" | awk NR==1)
printRow=$(echo "$printerStatus" | awk NR==2)
export defaultBrand printRow

refreshPrinters() {
  printerStatus=$(setjb-printers current 2>/dev/null)
  defaultBrand=$(echo "$printerStatus" | awk NR==1)
  printRow=$(echo "$printerStatus" | awk NR==2)
  getPrinters=$(echo "$printerStatus" | sed '1,2d')

  if [ "$1" = "brand" ]; then
    echo "$defaultBrand"
  elif [ "$1" = "row" ]; then
    echo "$printRow"
  else
    echo "$getPrinters"
  fi
}

printerTree() {
  echo '
    <comboboxtext>
      <variable>'$1'</variable>
      <input>bash -c "refreshPrinters"</input>
      <action>echo LocalPrinter: $'$1'</action>
      <action function="refresh">'$1'</action>
    </comboboxtext>
    <tree selection-mode="2" stock-id="gtk-print" selected-row="'$printRow'" column-visible="false|true|true|true" exported-column="2" rules-hint="true" sensitive="'$printDrivers'" hscrollbar-policy="2">
      <variable>'$2'</variable>
      <label>Brand|Model|Driver</label>
      <height>'$4'</height>
      <width>'$5'</width>
      <input icon-column="1">setjb-printers $'$3'</input>
      <action>echo PrinterModel: $'$2'</action>
    </tree>
    <hbox sensitive="'$printDrivers'">
      <button>
        <label>Install</label>
        <input file stock="gtk-print"></input>
        <action>setjb-printers install $'$2' $'$1'</action>
        <action function="refresh">SavedPrinters</action>
      </button>
      <button>
        <label>Refresh</label>
        <input file stock="gtk-refresh"></input>
        <action function="refresh">'$1'</action>
      </button>
      <text><label>Printer brand:</label></text>
      <comboboxtext space-expand="true" space-fill="true">
        <variable>'$3'</variable>
        <default>'$defaultBrand'</default>
        <input>setjb-printers OEM</input>
        <action>echo PrinterOEM: $'$3'</action>
        <action function="refresh">'$2'</action>
      </comboboxtext>
    </hbox>'
}

knownPrinterTree() {
  echo '<tree selection-mode="2" stock-id="'$3'" selected-row="'$2'" rules-hint="true" hscrollbar-policy="2">
      <variable>'$1'</variable>
      <label>Installed Printers</label>
      <height>'$4'</height>
      <width>'$5'</width>
      <input>setjb-printers saved</input>
    </tree>
    <hbox homogeneous="true">
      <button>
        <label>Set default</label>
        <input file stock="gtk-home"></input>
        <action>setjb-printers default $'$1'</action>
        <action function="refresh">'$1'</action>
      </button>
      <button>
        <label>Uninstall</label>
        <input file stock="gtk-delete"></input>
        <action>echo "Forgetting saved printer: $'$1'"</action>
        <action>setjb-printers delete $'$1'</action>
        <action function="refresh">'$1'</action>
      </button>
    </hbox>'
}

export -f refreshPrinters printerTree knownPrinterTree

############################################################################################

getNetworks=$(setjb-networks current 2>/dev/null)
[ -z "$getNetworks" ] && getNetworks="(none connected)"
export getNetworks

refreshNetworks() {
  getNetworks=$(setjb-networks current 2>/dev/null)
  [ -z "$getNetworks" ] && getNetworks="(none connected)"
  echo "$getNetworks"
}

networkTree() {
  echo '<tree selection-mode="2" stock-id="'$3'" selected-row="'$2'" rules-hint="true" hscrollbar-policy="2">
      <variable>'$1'</variable>
      <label>Saved Networks</label>
      <height>'$4'</height>
      <width>'$5'</width>
      <input>bash -c "refreshNetworks"</input>
    </tree>
    <hbox homogeneous="true">
      <button use-stock="true" label="gtk-remove">
        <action>echo "Forgetting saved network: $'$1'"</action>
        <action>setjb-networks delete $'$1'</action>
        <action function="refresh">'$1'</action>
        <action>grabfocus:'$1'</action>
      </button>
      <button use-stock="true" label="gtk-clear">
        <action>echo "Recalling saved networks: $'$1'"</action>
        <action>setjb-networks reset</action>
        <action function="refresh">'$1'</action>
        <action>grabfocus:'$1'</action>
      </button>
    </hbox>
    <timer interval="10" visible="false">
      <action condition="command_is_true([ $nbk -eq 1 ] && echo true)">refresh:Network</action>
    </timer>'
}

export -f refreshNetworks networkTree

############################################################################################

menuBar() {
  echo '<menubar>
			<menu label="_File" use-underline="true">
				<menuitem stock-id="gtk-new">
					<action>clear</action>
					<label>New</label>
                </menuitem>
				<menuitemseparator></menuitemseparator>
				<menuitem stock-id="gtk-quit" accel-key="0x51" accel-mods="4">
					<action>exit:Quit</action>
					<label>New</label>
                </menuitem>
          </menu>
		</menubar>'
}

############################################################################################

ffExec=$(ls /usr/lib/firefox/libxul.so 2>/dev/null)
gcExec=$(ls /opt/google/chrome/chrome 2>/dev/null)
chooseBrowser="true"
[ -z "$ffExec" -o -z "$gcExec" ] && chooseBrowser="false"
export chooseBrowser

ffDefault="false"
gcDefault="false"
getBrowser=$(setjb-default 2>/dev/null)
[ "$getBrowser" = "firefox" ] && ffDefault="true"
[ "$getBrowser" != "firefox" ] && gcDefault="true"
export getBrowser ffDefault gcDefault

defaultRadio() {
  echo '<frame>
          <text><label>Default web browser</label></text>
            <hbox homogeneous="true" sensitive="'$chooseBrowser'">
			<radiobutton>
                <variable>defaultFF</variable>
                <label>Firefox</label>
                <default>'$ffDefault'</default>
                <action signal="button-press-event">setjb-default firefox</action>
     		</radiobutton>
			<radiobutton>
                <variable>defaultGC</variable>
                <label>Chrome</label>
                <default>'$gcDefault'</default>
                <action signal="button-press-event">setjb-default chrome</action>
     		</radiobutton>
            </hbox>
        </frame>'
}

############################################################################################

realGPU="false"
qxlGPU="false"
vboxGPU="false"
vmwareGPU="false"
getVM=$(setjb-gpu 2>/dev/null)
[ -z "$getVM" ] && realGPU="true"
[ "$getVM" = "qxl" ] && qxlGPU="true"
[ "$getVM" = "vbox" ] && vboxGPU="true"
[ "$getVM" = "vmware" ] && vmwareGPU="true"
export realGPU qxlGPU vboxGPU vmwareGPU

virtualRadio() {
  echo '<frame>
          <text><label>Virtual GPU</label></text>
			<radiobutton>
                <label>none</label>
			    <variable>noVM</variable>
                <default>'$realGPU'</default>
                <action signal="button-press-event">setjb-gpu none</action>
     		</radiobutton>
			<radiobutton>
                <label>Spice/QXL</label>
			    <variable>spice</variable>
                <default>'$qxlGPU'</default>
                <action signal="button-press-event">setjb-gpu qxl</action>
     		</radiobutton>
			<radiobutton>
                <label>VirtualBox</label>
			    <variable>virtualbox</variable>
                <default>'$vboxGPU'</default>
                <action signal="button-press-event">setjb-gpu vbox</action>
     		</radiobutton>
			<radiobutton>
                <label>VMware</label>
			    <variable>vmware</variable>
                <default>'$vmwareGPU'</default>
                <action signal="button-press-event">setjb-gpu vmware</action>
     		</radiobutton>
        </frame>'
}

############################################################################################

freshProfile="false"
getClean=$(setjb-clean 2>/dev/null)
[ "$getClean" = "true" ] && freshProfile="true"
kioskState="false"
getKiosk=$(setjb-kiosk 2>/dev/null)
[ "$getKiosk" = "true" ] && kioskState="true"
export freshProfile kioskState

checkBoxes() {
  echo '<frame>
            <text><label>Requires reboot</label></text>
			<checkbox auto-refresh="true">
                <label>Enable "clean" profiles</label>
			    <variable>cleanProfiles</variable>
                <default>'$freshProfile'</default>
			    <action>setjb-clean $cleanProfiles</action>
     		</checkbox>
			<checkbox auto-refresh="true">
                <label>Enable kiosk mode</label>
			    <variable>kioskMode</variable>
                <default>'$kioskState'</default>
			    <action>setjb-kiosk $kioskMode</action>
			</checkbox>
        </frame>'
}

############################################################################################

emailProvider=$(setjb-email 2>/dev/null)
[ -z "$emailProvider" ] && emailProvider="0"
export emailProvider

emailEntry() {
  echo '<text><label>E-mail Provider</label></text>
        <comboboxtext>
          <default>'$emailProvider'</default>
          <variable>Email</variable>
          <item>(none)</item>
          <item>Google</item>
          <item>Microsoft</item>
          <item>Yahoo</item>
          <item>Zoho</item>
          <action>echo "Setting E-mail Provider: $Email"</action>
          <action>setjb-email "$Email"</action>
        </comboboxtext>'
}

############################################################################################

customURL=$(setjb-url 2>/dev/null)
homepage="$customURL"
[ -z "$homepage" ] && homepage="(none)"

listURLs() {
  URLs=("(none)" "https://duckduckgo.com" "http://justbrowsing.info" "$customURL")
  echo ${URLs[@]} | tr ' ' '\n' | sort -ur | grep -e "^(none)$" -e "^http://" -e "^https://" -e "^file:///"
}

export customURL homepage
export -f listURLs

urlEntry() {
  echo '<text><label>Homepage</label></text>
        <comboboxentry>
          <default>'$homepage'</default>
          <variable>URL</variable>
          <input>bash -c "listURLs"</input>
          <action>echo "Setting URL: $URL"</action>
          <action>setjb-url "$URL"</action>
        </comboboxentry>'
}

############################################################################################

resolution=$(setjb-display 2>/dev/null | awk -F : '{print $1}')
export resolution

setDisplay() {
  panel=$(pgrep -o adeskbar);
  setjb-display "$1" "$2"
  [ ! -z "$panel" ] && loadjb-panel
}

export -f setDisplay

displayTree() {
  echo '<tree selection-mode="2" stock-id="'$3'" column-visible="true|false" selected-row="0" exported-column="0" rules-hint="true" auto-stort="true" sort-type="1" column-sort-function="1" hscrollbar-policy="2">
      <variable>'$1'</variable>
      <label>'$1' | </label>
      <height>'$4'</height>
      <width>'$5'</width>
      <input icon-column="0">setjb-display current gtk</input>
    </tree>
    <comboboxtext>
      <variable>'$2'</variable>
      <item>normal</item>
      <item>left</item>
      <item>right</item>
      <item>inverted</item>
    </comboboxtext>
    <hbox homogeneous="true">
      <button use-stock="true" label="gtk-apply">
        <action>echo Setting '$1': $'$1'</action>
        <action>bash -c "setDisplay $'$1' $'$2'"</action>
        <action>refresh:'$1'</action>
      </button>
      <button use-stock="true" label="gtk-revert-to-saved">
        <action>echo Resetting '$1' and '$2'</action>
        <action>bash -c "setDisplay $resolution normal"</action>
        <action function="refresh">'$1'</action>
        <action function="refresh">'$2'</action>
        <action>grabfocus:'$1'</action>
      </button>
    </hbox>'
}

############################################################################################

lang=$(setjb-locale 2>/dev/null | awk -F : '{print $1}')
export lang

localeTree() {
  echo '<tree selection-mode="2" stock-id="'$3'" column-visible="true|true|true" selected-row="0" exported-column="1" rules-hint="true" hscrollbar-policy="2">
      <variable>'$1'</variable>
      <label>'$1' | Code</label>
      <height>'$4'</height>
      <width>'$5'</width>
      <input icon-column="0">setjb-locale list gtk</input>
    </tree>
    <hbox homogeneous="true">
      <button use-stock="true" label="gtk-apply">
        <action>echo Setting '$1': $'$1'</action>
        <action>setjb-locale "$'$1'"</action>
        <action>refresh:'$1'</action>
      </button>
      <button use-stock="true" label="gtk-revert-to-saved">
        <action>echo Resetting '$1'</action>
        <action>setjb-locale "$lang"</action>
        <action>refresh:'$1'</action>
      </button>
    </hbox>'
}

############################################################################################

layout=$(setjb-keymap 2>/dev/null | awk -F : '{print $1}')
export layout

keymapTree() {
  echo '<tree selection-mode="2" stock-id="'$3'" column-visible="true|true|true" selected-row="0" exported-column="1" rules-hint="true" hscrollbar-policy="2">
      <variable>'$1'</variable>
      <label>'$1' | Code</label>
      <height>'$4'</height>
      <width>'$5'</width>
      <input icon-column="0">setjb-keymap list gtk</input>
    </tree>
    <hbox homogeneous="true">
      <button use-stock="true" label="gtk-apply">
        <action>echo Setting '$1': $'$1'</action>
        <action>setjb-keymap "$'$1'"</action>
        <action>refresh:'$1'</action>
      </button>
      <button use-stock="true" label="gtk-revert-to-saved">
        <action>echo Resetting '$1'</action>
        <action>setjb-keymap "$layout"</action>
        <action>refresh:'$1'</action>
      </button>
    </hbox>'
}

############################################################################################

zoneRegion=$(setjb-zone region 2>/dev/null);
export zoneRegion

zoneTree() {
  echo '<tree selection-mode="2" stock-id="'$3'" column-visible="false|true" selected-row="0" exported-column="1" rules-hint="true" hscrollbar-policy="2">
      <variable>'$1'</variable>
      <label>| '$1'</label>
      <height>'$4'</height>
      <width>'$5'</width>
      <input icon-column="0">setjb-zone list $'$2'</input>
    </tree>
    <comboboxtext>
      <default>'$zoneRegion'</default>
      <variable>'$2'</variable>
      <item>Africa</item>
      <item>America</item>
      <item>Antarctica</item>
      <item>Arctic</item>
      <item>Asia</item>
      <item>Atlantic</item>
      <item>Australia</item>
      <item>Europe</item>
      <item>Indian</item>
      <item>Pacific</item>
      <action function="refresh">'$1'</action>
    </comboboxtext>
    <hbox homogeneous="true">
      <button use-stock="true" label="gtk-apply">
        <action>echo Setting '$4': $'$1'</action>
        <action>setjb-zone "$'$2'/$'$1'"</action>
        <action function="refresh">'$1'</action>
      </button>
      <button use-stock="true" label="gtk-revert-to-saved">
        <action>echo Resetting: '$1' '$2'</action>
        <action>setjb-zone "${zoneRegion}/$'$1'"</action>
        <action function="refresh">'$1'</action>
        <action>grabfocus:'$1'</action>
      </button>
    </hbox>'
}

############################################################################################

getLight=$(setjb-backlight current 2>/dev/null)
export getLight

refreshLight() {
  getLight=$(setjb-backlight current 2>/dev/null)
  [ "$getLight" -ge 1 -a "$getLight" -le 100 ] && echo "$getLight"
}

export -f refreshLight

lightScale() {
  echo '<text><label>Screen Backlight (percent)</label></text>
    <hscale width-request="300" height-request="50" range-min="1" range-max="100" range-step="1">
      <default>'$getLight'</default>
      <variable>'$1'</variable>
      <input>bash -c "refreshLight"</input>
    </hscale>
    <hbox homogeneous="true">
      <button use-stock="true" label="gtk-apply">
        <action>echo "Setting backlight: $'$1'"</action>
        <action>setjb-backlight $'$1'</action>
      </button>
      <button>
        <label>Reset</label>
        <input file stock="gtk-clear"></input>
        <action>echo "Resetting backlight: 100"</action>
        <action>setjb-backlight reset</action>
        <action function="refresh">'$1'</action>
        <action>grabfocus:'$1'</action>
      </button>
      <button>
        <label>Invert</label>
        <input file stock="gtk-convert"></input>
        <action>echo "Toggle invert colors"</action>
        <action>setjb-backlight invert</action>
      </button>
    </hbox>
    <timer interval="10" visible="false">
      <action condition="command_is_true([ $nbk -eq 2 ] && echo true)">refresh:Backlight</action>
    </timer>'
}

############################################################################################

getIdle=$(setjb-idle current 2>/dev/null)
[ "$getIdle" -ge "60" ] 2>/dev/null && getIdle=$((getIdle/60))
export getIdle

refreshIdle() {
  getIdle=$(setjb-idle current 2>/dev/null)
  [ "$getIdle" -ge "60" ] 2>/dev/null && getIdle=$((getIdle/60))
  echo "$getIdle"
}

export -f refreshIdle

timeoutScale() {
  echo '<text><label>Screen Timeout (minutes)</label></text>
    <hscale width-request="300" height-request="50" range-min="0" range-max="60" range-step="1">
      <default>'$getIdle'</default>
      <variable>'$1'</variable>
      <input>bash -c "refreshIdle"</input>
      <action>echo "Setting timeout: $'$1' minutes"</action>
      <action>setjb-idle $'$1' gtk</action>
    </hscale>
    <hbox homogeneous="true">
      <button>
        <label>Reset</label>
        <input file stock="gtk-clear"></input>
        <action>echo "Resetting timeout: 10 minutes"</action>
        <action>setjb-idle reset</action>
        <action function="refresh">'$1'</action>
        <action>grabfocus:'$1'</action>
      </button>
      <button>
        <label>Disable</label>
        <input file stock="gtk-stop"></input>
        <action>echo "Disabling timeout"</action>
        <action>setjb-idle off</action>
        <action function="refresh">'$1'</action>
        <action>grabfocus:'$1'</action>
      </button>
    </hbox>
    <timer interval="10" visible="false">
      <action condition="command_is_true([ $nbk -eq 2 ] && echo true)">refresh:Idle</action>
    </timer>'
}

############################################################################################

refreshVolume() {
  getVolume=$(setjb-volume current 2>/dev/null)
  [ "$getVolume" -ge 1 -a "$getVolume" -le 200 ] && echo "$getVolume"
}

refreshMute() {
  getMute=$(setjb-volume status 2>/dev/null)
  echo "$getMute"
}

toggleMute() {
  getMute=$(setjb-volume status 2>/dev/null)
  [ "$getMute" = "false" ] && setjb-volume mute
  [ "$getMute" = "true" ] && setjb-volume unmute
}

export -f refreshVolume refreshMute toggleMute

volumeScale() {
  echo '<text><label>Sound volume (percent)</label></text>
    <hscale width-request="200" height-request="50" range-min="0" range-max="200" range-step="1">
      <variable>'$1'</variable>
      <input>bash -c "refreshVolume"</input>
      <action>echo "Setting volume: $'$1'"</action>
      <action>setjb-volume $'$1'</action>
    </hscale>
    <hbox homogeneous="true">
      <button>
        <label>Reset</label>
        <input file stock="gtk-clear"></input>
        <action>echo "Resetting volume: 100"</action>
        <action>setjb-volume reset</action>
        <action function="refresh">'$1'</action>
        <action function="refresh">'$2'</action>
        <action>grabfocus:'$1'</action>
      </button>
      <checkbox auto-refresh="true">
        <label>Mute</label>
        <variable>'$2'</variable>
        <input>bash -c "refreshMute"</input>
        <action>bash -c "toggleMute"</action>
      </checkbox>
    </hbox>
    <timer interval="2" visible="false">
      <action condition="command_is_true([ $nbk -eq 2 ] && echo true)">refresh:Audio</action>
    </timer>'
}

############################################################################################

getMouse=$(setjb-mouse current 2>/dev/null)
getTap=$(setjb-mouse tap 2>/dev/null)
export getMouse getTap

refreshMouse() {
  getMouse=$(setjb-mouse current 2>/dev/null)
  echo "$getMouse"
}

toggleTap() {
  getTap=$(setjb-mouse tap 2>/dev/null)
  [ "$getTap" = "false" ] && setjb-mouse touchpad enabletap
  [ "$getTap" = "true" ] && setjb-mouse touchpad disabletap
}

export -f refreshMouse toggleTap

mouseScale() {
  echo '<text><label>Mouse acceleration (multiplier)</label></text>
    <hscale width-request="300" height-request="50" range-min="0.01" range-max="4" range-step="0.01">
      <default>'$getMouse'</default>
      <variable>'$1'</variable>
      <input>bash -c "refreshMouse"</input>
    </hscale>
    <hbox homogeneous="true">
      <button use-stock="true" label="gtk-apply">
        <action>echo "Setting mouse acceleration: $'$1'"</action>
        <action>setjb-mouse $'$1' gtk</action>
      </button>
      <button>
        <label>Reset</label>
        <input file stock="gtk-clear"></input>
        <action>echo "Resetting mouse acceleration: 2/1 4"</action>
        <action>setjb-mouse reset</action>
        <action function="refresh">'$1'</action>
        <action function="refresh">'$2'</action>
        <action>grabfocus:'$1'</action>
      </button>
      <checkbox auto-refresh="true">
        <label>Touchpad Tap</label>
        <variable>'$2'</variable>
        <default>'$getTap'</default>
        <action>bash -c "toggleTap"</action>
      </checkbox>
    </hbox>
    <timer interval="10" visible="false">
      <action condition="command_is_true([ $nbk -eq 2 ] && echo true)">refresh:Cursor</action>
    </timer>'
}

############################################################################################

MAIN_DIALOG='
<window title="JustBrowsing Config" icon-name="'$icon'" resizable="false" width-request="'$width'">
<vbox>
  <notebook tab-labels="Settings|Devices|Advanced">
  <vbox label="Settings">
    <frame>
      <hbox>
        <vbox>
          '"`displayTree Display Rotate gtk-fullscreen 175 220`"'
          <hseparator></hseparator>
          '"`keymapTree Keymap 1 gtk-select-font 185 225`"'
        </vbox>
        <vseparator></vseparator>
        <vbox>
          '"`defaultRadio`"'
          '"`virtualRadio`"'
          '"`checkBoxes`"'
          '"`emailEntry`"'
          '"`urlEntry`"'
        </vbox>
        <vseparator></vseparator>
        <vbox>
          '"`zoneTree Timezone Region gtk-home 175 220`"'
          <hseparator></hseparator>
          '"`localeTree Locale 1 gtk-spell-check 185 240`"'
        </vbox>
      </hbox>
    </frame>
  </vbox>

  <vbox label="Devices">
    <frame>
      <hbox>
        <vbox>
          '"`knownPrinterTree SavedPrinters 0 gtk-print 160 228`"'
          <hseparator></hseparator>
          '"`networkTree Network 0 gtk-network 160 220`"'
          <hseparator></hseparator>
        </vbox>
        <vseparator></vseparator>
        <vbox>
          '"`printerTree USBprint Printer Brand 420 440`"'
          <hseparator></hseparator>
        </vbox>
      </hbox>
    </frame>
  </vbox>

  <vbox label="Advanced">
    <frame>
      <hbox>
        <edit wrap-mode="3">
          <input file>/opt/justbrowsing/welcome.txt</input>
        </edit>
        <vseparator></vseparator>
        <vbox>
          '"`mouseScale Cursor Touchpad`"'
          <hseparator></hseparator>
          '"`lightScale Backlight`"'
          <hseparator></hseparator>
          '"`timeoutScale Idle`"'
          <hseparator></hseparator>
          '"`volumeScale Audio Mute`"'
          <hseparator></hseparator>
        </vbox>
      </hbox>
    </frame>
  </vbox>

  <variable>nbk</variable>
  </notebook>
  <hbox>
    <button>
      <label>Save</label>
      <input file stock="gtk-save"></input>
      <action>savejb-config &</action>
      <action>exit:Quit</action>
    </button>
    <button>
      <label>Quit</label>
      <input file stock="gtk-quit"></input>
      <action>exit:Quit</action>
    </button>
    <button help>
      <action>loadjb-help &</action>
      <action>exit:Quit</action>
    </button>
  </hbox>
</vbox>
</window>'

export MAIN_DIALOG
gtkdialog -c --program MAIN_DIALOG

### END ###
